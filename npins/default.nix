/*
This file is provided under the MIT licence:

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the “Software”), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
# Generated by npins. Do not modify; will be overwritten regularly
let
  # Backwards-compatibly make something that previously didn't take any arguments take some
  # The function must return an attrset, and will unfortunately be eagerly evaluated
  # Same thing, but it catches eval errors on the default argument so that one may still call it with other arguments
  mkFunctor = fn: let
    e = builtins.tryEval (fn {});
  in
    (
      if e.success
      then e.value
      else {error = fn {};}
    )
    // {__functor = _self: fn;};

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/lists.nix#L295
  range = first: last:
    if first > last
    then []
    else builtins.genList (n: first + n) (last - first + 1);

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L257
  stringToCharacters = s: map (p: builtins.substring p 1 s) (range 0 (builtins.stringLength s - 1));

  # https://github.com/NixOS/nixpkgs/blob/0258808f5744ca980b9a1f24fe0b1e6f0fecee9c/lib/strings.nix#L269
  stringAsChars = f: s: concatStrings (map f (stringToCharacters s));
  concatMapStrings = f: list: concatStrings (map f list);
  concatStrings = builtins.concatStringsSep "";

  # If the environment variable NPINS_OVERRIDE_${name} is set, then use
  # the path directly as opposed to the fetched source.
  # (Taken from Niv for compatibility)
  mayOverride = name: path: let
    envVarName = "NPINS_OVERRIDE_${saneName}";
    saneName = stringAsChars (c:
      if (builtins.match "[a-zA-Z0-9]" c) == null
      then "_"
      else c)
    name;
    ersatz = builtins.getEnv envVarName;
  in
    if ersatz == ""
    then path
    else
      # this turns the string into an actual Nix path (for both absolute and
      # relative paths)
      builtins.trace "Overriding path of \"${name}\" with \"${ersatz}\" due to set \"${envVarName}\"" (
        if builtins.substring 0 1 ersatz == "/"
        then /. + ersatz
        else /. + builtins.getEnv "PWD" + "/${ersatz}"
      );

  mkSource = name: spec: {pkgs ? null}:
    assert spec ? type; let
      # Unify across builtin and pkgs fetchers.
      # `fetchGit` requires a wrapper because of slight API differences.
      fetchers =
        if pkgs == null
        then {
          inherit (builtins) fetchTarball fetchurl;
          # For some fucking reason, fetchGit has a different signature than the other builtin fetchers …
          fetchGit = args: (builtins.fetchGit args).outPath;
        }
        else {
          fetchTarball = pkgs.fetchzip;
          inherit (pkgs) fetchurl;
          fetchGit = {
            url,
            submodules,
            rev,
            name,
            narHash,
          }:
            pkgs.fetchgit {
              inherit url rev name;
              fetchSubmodules = submodules;
              hash = narHash;
            };
        };

      # Dispatch to the correct code path based on the type
      path =
        if spec.type == "Git"
        then mkGitSource fetchers spec
        else if spec.type == "GitRelease"
        then mkGitSource fetchers spec
        else if spec.type == "PyPi"
        then mkPyPiSource fetchers spec
        else if spec.type == "Channel"
        then mkChannelSource fetchers spec
        else if spec.type == "Tarball"
        then mkTarballSource fetchers spec
        else builtins.throw "Unknown source type ${spec.type}";
    in
      spec // {outPath = mayOverride name path;};

  mkGitSource = {
    fetchTarball,
    fetchGit,
    ...
  }: {
    repository,
    revision,
    url ? null,
    submodules,
    hash,
    branch ? null,
    ...
  }:
    assert repository ? type;
    # At the moment, either it is a plain git repository (which has an url), or it is a GitHub/GitLab repository
    # In the latter case, there we will always be an url to the tarball
      if url != null && !submodules
      then
        fetchTarball {
          inherit url;
          sha256 = hash;
        }
      else let
        url =
          if repository.type == "Git"
          then repository.url
          else if repository.type == "GitHub"
          then "https://github.com/${repository.owner}/${repository.repo}.git"
          else if repository.type == "GitLab"
          then "${repository.server}/${repository.repo_path}.git"
          else throw "Unrecognized repository type ${repository.type}";
        urlToName = url: rev: let
          matched = builtins.match "^.*/([^/]*)(\\.git)?$" url;

          short = builtins.substring 0 7 rev;

          appendShort =
            if (builtins.match "[a-f0-9]*" rev) != null
            then "-${short}"
            else "";
        in "${
          if matched == null
          then "source"
          else builtins.head matched
        }${appendShort}";
        name = urlToName url revision;
      in
        fetchGit {
          rev = revision;
          narHash = hash;

          inherit name submodules url;
        };

  mkPyPiSource = {fetchurl, ...}: {
    url,
    hash,
    ...
  }:
    fetchurl {
      inherit url;
      sha256 = hash;
    };

  mkChannelSource = {fetchTarball, ...}: {
    url,
    hash,
    ...
  }:
    fetchTarball {
      inherit url;
      sha256 = hash;
    };

  mkTarballSource = {fetchTarball, ...}: {
    url,
    locked_url ? url,
    hash,
    ...
  }:
    fetchTarball {
      url = locked_url;
      sha256 = hash;
    };
in
  mkFunctor (
    {input ? ./sources.json}: let
      data =
        if builtins.isPath input
        then
          # while `readFile` will throw an error anyways if the path doesn't exist,
          # we still need to check beforehand because *our* error can be caught but not the one from the builtin
          # *piegames sighs*
          if builtins.pathExists input
          then builtins.fromJSON (builtins.readFile input)
          else throw "Input path ${toString input} does not exist"
        else if builtins.isAttrs input
        then input
        else throw "Unsupported input type ${builtins.typeOf input}, must be a path or an attrset";
      version = data.version;
    in
      if version == 6
      then builtins.mapAttrs (name: spec: mkFunctor (mkSource name spec)) data.pins
      else throw "Unsupported format version ${toString version} in sources.json. Try running `npins upgrade`"
  )
